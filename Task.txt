task структурированный:
	[ВЫПОЛНЕНО [ДАТА]]+++"{Задача}" {Описание}


    ВЫПОЛНЕНО+++"Формирование брони" { 
	0-генерация брони от order. Менеджеры: ALTER TABLE managers ADD COLUMN _nameForArmour TEXT;}	
	ВЫПОЛНЕНО+++"Группировать менеджеров" {1-менеджеры -добавить группу чисто для менеджеров. Сейчас запрос:
		model->setQuery("SELECT _code FROM managers WHERE _folder=0 and _mark=0",Settings::S()->_db);
	изменить на: "SELECT _code FROM managers WHERE _folder=0 and _mark=0 and _parent='OnlyManagers'"
	}
	ВЫПОЛНЕНО+++"Использовать текущее время, а не utf"{
		2-изменить при создание время на : "select datetime('now','localtime');" Сейчас отстает на 3 часа.}  
	ВЫПОЛНЕНО+++"trade"{
	  "CREATE TABLE IF NOT EXISTS trade( "
	  " _id integer PRIMARY KEY NOT NULL,"
	  " _date TEXT,"
	  " _status TEXT check( _folder='Учитывать в отчете по поиску' or _folder='Не учитывать в отчете') NOT NULL DEFAULT 'Учитывать в отчете по поиску'"
	  " _orders INTEGER REFERENCES orders(_id ) ON UPDATE CASCADE,"
	 " _dealer text REFERENCES dealers(_code) ON UPDATE CASCADE NOT NULL "
	 " _comment TEXT, "
	 " _color_option_trade TEXT," 
	 " giveAwayCar TEXT,"
	 " giveAwayVin TEXT,"
	 " giveAwayDate TEXT,"
	 " getCar TEXT,"
	 " getVin TEXT,"
	 " getDate TEXT);"
	}
	ВЫПОЛНЕНО+++"QDateTimeEdit"{
		QDateTimeEdit can be configured to allow a QCalendarWidget to be used to select dates. This is enabled by setting the calendarPopup property. 
	}
	ВЫПОЛНЕНО+++ 06.09.2018 "добавить акции в order для брони"{
		в order нужно добавить акции. Отдельная таблица:
		"CREATE TABLE IF NOT EXISTS order_stocks( "
			" _name TEXT PRIMARY KEY NOT NULL,"
			" _mark integer check( _mark=1 or _mark=0) DEFAULT 0);"
	 <<"INSERT OR IGNORE INTO order_stocks(_name) VALUES "
       " ('Без акций'), " 
       " ('Наличка трейдин'), " 
       " ('Кредит трейдин');" 
	в ордер вставить:
	 " order_action TEXT REFERENCES order_stocks(_name) ON UPDATE CASCADE DEFAULT 'Без акций'"
	}
	ВЫПОЛНЕНО+++ 06.09.2018 "Ввести несколько цветов по умолчанию"{:
		"INSERT OR IGNORE INTO colors(_code,_name) VALUES "
		" ('369', 'Белый лед [369]'), "
		" ('676', 'Черная жемчужина [676]'), "
		" ('D17', 'Темный каштан [D17]'), "
		" ('D69', 'Серая платина [D69]'), "
		" ('DNP', 'Хаки [DNP]'), "
		" ('ENZ', 'Оранжевая аризона [ENZ]'), "
		" ('CNM', 'Коричневый [CNM]'), "
		" ('KNM', 'Серый базальт [KNM]'), "
		" ('RPG', 'Синий сапфир [RPG]'), "
		" ('RPL', 'Лазурно-синий [RPL]'), "
		" ('XTM', 'Коричневый каштан с черной крышей [XTM]'), "
		" ('XTN', 'Коричневый каштан с крышей цвета слоновая кость [XTN]'), "
		" ('XTP', 'Черная жемчужина с крышей цвета слоновая кость [XTP]'), "
		" ('XZY', 'Слоновая кость с крышей коричневый каштан [XZY]'), "
		" ('KAD', 'Темная сталь [KAD]'), "
		" ('NPI', 'Красный [NPI]'), "
		" ('XTK', 'Белый лед с черной крышей [XTK]'), "
		" ('XTL', 'Темная сталь с черной крышей [XTL]'), "
		" ('XTR', 'Серая платина с черной крышей [XTR]'), "
		" ('XVQ', 'Красный с черной крышей [XVQ]'), "
		" ('YNL', 'Красный с крышей цвета слоновой кости [YNL]'), "
		" ('RPM', 'Синяя лазурь [RPM]'), "
		" ('XNP', 'Оранжевая Аризона с крышей цвета слоновой кости [XNP]'), "
		" ('XTS', 'Оранжевая Аризона с черной крышей [XTS]'), "
		" ('XTT', 'Синяя лазурь с черной крышей [XTT]'), "
		" ('ENZ', 'Оранжевая Аризона [ENZ]'), "
		" ('XNV', 'Синяя лазурь с крышей цвета слоновой кости [XNV]'), "
		" ('XTQ', 'Зеленый хаки с черной крышей [XTQ]'), "
		" ('B76', 'Красный [B76]'), "
		" ('F90', 'Золотисто-зеленый Оникс [F90]'), "
		" ('D42', 'Синий океан [D42]'), "
		" ('KNA', 'Серая комета [KNA]'); "
	}	 
	ВЫПОЛНЕНО+++"Исправить-одна presentation дл order"{ 
    +9-order presentation к чертям летит. Ставится последняя. дописать: " WHERE orders._id=NEW._id " в конец
	<<" CREATE TRIGGER IF NOT EXISTS orders_presentation_inser AFTER INSERT ON orders "
      " BEGIN  "
      "     UPDATE orders SET _presentation=NEW._manager||' for '||NEW._client||' in '||NEW._workList  WHERE orders._id=NEW._id ; "
      " END; "
    <<" CREATE TRIGGER IF NOT EXISTS orders_presentation_update AFTER UPDATE ON orders "
      " BEGIN  "
      "     UPDATE orders SET _presentation=NEW._manager||' for '||NEW._client||' in '||NEW._workList  WHERE orders._id=NEW._id ; "
      " END; "
	}
	"Группировка цветов по имени вместе"{
		нужно выводить хотя бы отсортированный лист цветов. 
	https://www.linux.org.ru/forum/development/11689249
	попробовать настроить QSortFilterProxyModel для сортировки цветов. Цвет красный под индексом 10 идет в начале и цвет красный под индексом 44 идет в конце. Хочу отсортировать коды по имени, чтобы красный,красный,красный с черным, красный с базальтом шли рядом друг за другом.
	Сейчас используется QSqlRelationalTableModel
		subColorTable=new Subtable(this,0,2,code,-1);
		subColorTable->modelRelational=new QSqlRelationalTableModel(this,Settings::S()->_db);
	сортировку не сделать, это таблица: ид,кодЦвета,Родитель.
		QSqlRelation просто данные дает. Более развернутый QIndexModel
		Можно попробовать переопределить делегат и дать ему уже отсортированную таблицу. И индексы поправить.
			tableView->setItemDelegate(new QSqlRelationalDelegate(tableView));
		или QSortFilterProxyModel в делегат запихнуть.
		Или просто как с phone сделать: в данной колонке изменить Editor:
			callsTable->tableView->setItemDelegateForColumn(i,forAllColimn);
			и в него уже пихать данные.
	}
	"отчет по нахождению"{
	
	"CREATE TABLE IF NOT EXISTS trade( "
          " _id integer PRIMARY KEY NOT NULL,"
          " _date TEXT,"
          " _status TEXT check( _status='Учитывать в отчете по поиску' or _status='Не учитывать в отчете') DEFAULT 'Учитывать в отчете по поиску',"
          " _orders INTEGER REFERENCES orders(_id ) ON UPDATE CASCADE,"
         " _dealer text REFERENCES dealers(_code) ON UPDATE CASCADE, "
         " _comment TEXT, "
         " _color_option_trade TEXT,"
         " _giveAwayCar TEXT,"
         " _giveAwayVin TEXT,"
         " _giveAwayDate TEXT,"
         " _getCar TEXT,"
         " _getVin TEXT,"
         " _getDate TEXT);"
	Для отчета нужны колонки:
		1-Строка//Просто нумерация ++i
		2-Клиент купил//destinyTrade._boughtCliend
		3-Менеджер продал//destinyTrade._soldManager
		4-Дата реализации//destinyTrade._dateSold	
		5-Менеджеру искал//managers._nameForArmour 
		6-Клиент искал//orders._client
		7-РЛ//orders._workList
		8-Дата производства//trade._getDate
		9-Модель полученная//trade._getCar
		10-Вин полученного//trade._getVin	
		11-Модель отданная//trade._giveAwayCar		
		12-Вин отданного//trade._giveAwayVin		
		13-ЦветаОпцииОбмена	//trade._color_option_trade	
		14-Дата производства отданного авто//trade._giveAwayDate	
	SELECT
		destinyTrade._boughtCliend as _boughtCliend,
		destinyTrade._soldManager as _soldManager,
		destinyTrade._dateSold as _dateSold,
		managers._nameForArmour as _nameForArmour,
		orders._client as findForClient,
		orders._workList as findForWorkList,
		trade._getDate as _getDate,
		trade._getCar as _getCar,
		trade._getVin as _getVin,
		trade._giveAwayCar as _giveAwayCar,
		trade._giveAwayVin as _giveAwayVin,
		trade._giveAwayDate as _giveAwayDate,
		trade._color_option_trade as _color_option_trade
	FROM trade
	LEFT JOIN orders ON
	  orders._id=trade._orders
	LEFT JOIN managers ON
		managers._code=orders._manager
	LEFT JOIN destinyTrade ON
		destinyTrade._parentTrade=trade._id
	WHERE 
		trade._date >= '2018-08-31' and trade._date < '2018-10-01'
		and trade._status='Учитывать в отчете по поиску';
	}
	 ВЫПОЛНЕНО+++"Добавить destinyTrade для отчета"{
	  "CREATE TABLE IF NOT EXISTS destinyTrade( "
	  " _parentTrade INTEGER PRIMARY KEY REFERENCES trade(_id) ON UPDATE CASCADE,"
	  " _boughtCliend TEXT,"
	  " _soldManager TEXT REFERENCES managers(_code) ON UPDATE CASCADE, "
	  " _dateSold TEXT,"
	  " _comment TEXT);"
	  
	+++++++ в идеале с автоматическим обновлением и добавлением:
	  <<" CREATE TRIGGER IF NOT EXISTS create_destinyTrade_trigger AFTER INSERT ON trade "
      " BEGIN  "
      "     INSERT INTO destinyTrade(_parentTrade) VALUES (NEW._id);"
      " END; "
	
	  " CREATE TRIGGER IF NOT EXISTS update_destinyTrade_trigger AFTER UPDATE ON trade "
      " BEGIN  "
      "     UPDATE destinyTrade SET _parentTrade=NEW._id WHERE destinyTrade._parentTrade=OLD._id; "
      " END; "
	 } 
	"Форма destinyTrade"{
		QLabel *vinCar; //trade._getCar as _getCar
		QLabel *orderPresentation//orders._presentation
		QLabel *_parentTrade;
		QLineEdit *boughtClient;
		QComboBox *soldManager;
		QDateEdit*dateSold;
		QLineEdit*comment;
		
		QString code;
		
	void makeGui(){
		vinCar= new QLabel(this);
		orderPresentation=new QLabel(this);
		parentTrade=new QLabel(this);
		boughtClient=new QLineEdit(this);
		soldManager=new QComboBox(this);
		dateSold=new QDateEdit(QDate::currentDate(),this);
		dateSold->setCalendarPopup(true);
		dateSold->setDisplayFormat("yyyy-MM-dd");
		comment=new QLibeEdit(this);
		
		QVBoxLayout * mainLayout=new QVBoxLayout(this);
		this->setLayout(mainLayout);
		
		QVBoxLayout * tradeLayout=new QVBoxLayout(this);
		QLabel * tradeLabel=new QLabel("trade:",this);
		tradeLabel->setSizePolicy(QSizePolicy(QSizePolicy::Maximum, QSizePolicy::Maximum));
		tradeLayout->addWidget(tradeLabel);
		tradeLayout->addWidget(parentTrade);
		mainLayout->addLayout(tradeLayout);
		
		QVBoxLayout * orderLayout=new QVBoxLayout(this);
		QLabel * orderLabel=new QLabel("For:",this);
		orderLabel->setSizePolicy(QSizePolicy(QSizePolicy::Maximum, QSizePolicy::Maximum));
		orderLayout->addWidget(orderLabel);
		orderLayout->addWidget(orderPresentation);
		mainLayout->addLayout(orderLayout);
		
		QVBoxLayout * vinLayout=new QVBoxLayout(this);
		QLabel * vinLabel=new QLabel("Vin:",this);
		vinLabel->setSizePolicy(QSizePolicy(QSizePolicy::Maximum, QSizePolicy::Maximum));
		vinLayout->addWidget(vinLabel);
		vinLayout->addWidget(vinCar);
		mainLayout->addLayout(vinLayout);
		
		QVBoxLayout * clientLayout=new QVBoxLayout(this);
		QLabel * clientLabel=new QLabel("Bought client:",this);
		clientLabel->setSizePolicy(QSizePolicy(QSizePolicy::Maximum, QSizePolicy::Maximum));
		clientLayout->addWidget(clientLabel);
		clientLayout->addWidget(boughtClient);
		mainLayout->addLayout(clientLayout);
		
		QVBoxLayout * managerLayout=new QVBoxLayout(this);
		QLabel * managerLabel=new QLabel("Sell manager:",this);
		managerLabel->setSizePolicy(QSizePolicy(QSizePolicy::Maximum, QSizePolicy::Maximum));
		managerLayout->addWidget(managerLabel);
		managerLayout->addWidget(soldManager);
		mainLayout->addLayout(managerLayout);
		
		QVBoxLayout * dateSoldLayout=new QVBoxLayout(this);
		QLabel * sellDateLabel=new QLabel("Sell date:",this);
		sellDateLabel->setSizePolicy(QSizePolicy(QSizePolicy::Maximum, QSizePolicy::Maximum));
		dateSoldLayout->addWidget(sellDateLabel);
		dateSoldLayout->addWidget(dateSold);
		mainLayout->addLayout(dateSoldLayout);
		
		QVBoxLayout * commentLayout=new QVBoxLayout(this);
		QLabel * commentLabel=new QLabel("Sell date:",this);
		commentLabel->setSizePolicy(QSizePolicy(QSizePolicy::Maximum, QSizePolicy::Maximum));
		commentLayout->addWidget(commentLabel);
		commentLayout->addWidget(comment);
		mainLayout->addLayout(commentLayout);
		
		QMenuBar * mainMenu=new QMenuBar(this);
		mainLayout->setMenuBar(mainMenu);
		mainMenu->addAction("Update",this,SLOT(UPDATE_destiny()));
		mainMenu->addAction("Refresh all",this,SLOT(SELECT_destiny()));
	}
	
	void SELECT_destiny(){
		QSqlQuery query(Settings::S()->_db);
		query.prepare("SELECT "
		" destinyTrade._parentTrade as code, "
		" destinyTrade._boughtCliend as _boughtCliend, "
		" destinyTrade._soldManager as _soldManager, "
		" destinyTrade._dateSold as _dateSold, "
		" destinyTrade._comment as _comment, "
		" trade._getVin  as _getVin, "
		" orders._presentation as _presentation "
		" FROM destinyTrade "
		" LEFT JOIN trade ON "
		" destinyTrade._parentTrade=trade._id "
		" LEFT JOIN orders ON "
		" trade._orders=orders._id "
		" WHERE _parentTrade=:code;");
		query.bindValue(":code",code);
		if(!query.exec()){
			QMessageBox msgBox;
			msgBox.setText("Не получается SELECT_destiny\n\n"+Settings::S()->_db.lastError().text()+" |\n "+query.lastError().text()+" |\n "+query.lastQuery());
			msgBox.exec();
		}
		query.next();
		code=query.value("code").toString();
		_parentTrade->setText(code);
		vinCar->setText(query.value("_getVin").toString());
		orderPresentation->setText(query.value("_presentation").toString());
		boughtClient->setText(query.value("_boughtCliend").toString());
		soldManager->setCurrentText(query.value("_soldManager").toString());
		dateSold->setDate(query.value("_dateSold").toDate());
		comment->setText(query.value("_comment").toString());
	}
	
	void UPDATE_destiny(){
		" _parentTrade INTEGER PRIMARY KEY REFERENCES trade(_id) ON UPDATE CASCADE,"
       " _boughtCliend TEXT,"
       " _soldManager TEXT REFERENCES managers(_code) ON UPDATE CASCADE, "
       " _dateSold TEXT,"
       " _comment TEXT);"
		QSqlQuery query(Settings::S()->_db);
		query.prepare("UPDATE  destinyTrade SET "
		" _boughtCliend=:_boughtCliend, "
		" _dateSold=:_dateSold, "
		" _soldManager=:_soldManager, "
		" _comment=:_comment "
		" WHERE _parentTrade =:code");
		query.bindValue(":code",code);
		query.bindValue(":_boughtCliend",boughtClient->text());
		query.bindValue(":_dateSold",dateSold->text());
		query.bindValue(":_soldManager",soldManager->currentText());
		query.bindValue(":_comment",comment->text());
		if(!query.exec()){
			QMessageBox msgBox;
			msgBox.setText("Не получается UPDATE_destiny\n\n"+Settings::S()->_db.lastError().text()+" |\n "+query.lastError().text()+" |\n "+query.lastQuery());
			msgBox.exec();
		}
	}
	
	}	
	"Форма отчета по нахождению"{
	class BaseReport{
		
	};
	class ReportForPrint:BaseReport{
		
	}
	class ReportALl:BaseReport{
		
	};
	
QDateTimeEdit для начала периода и конца периода.
//https://github.com/AlexisVaBel/QtReport/blob/master/report/reporter.cpp
QTextDocument//-основа его и выводим в widget
QTextCursor//для работы с QTextDocument
//в QTextBlockFormat QTextTableFormat все делаем.

m_document(new QTextDocument()),
m_cursor(m_document)

Reporter::~Reporter(){
    delete m_document;
}

void Reporter::setDateDoc(){
    m_cursor.movePosition(QTextCursor::End);
    if(m_iCntTbls>0){
        m_cursor.insertBlock();
        m_cursor.insertBlock();
        m_cursor.movePosition(QTextCursor::End);
    }
    m_cursor.insertText(QDateTime::currentDateTime().toString("dd.MM.yy hh:mm"));
}
void Reporter::setCompanyDoc(QString str){
    m_cursor.movePosition(QTextCursor::End);
    if(m_iCntTbls>0){
        m_cursor.insertBlock();
        m_cursor.insertBlock();
        m_cursor.movePosition(QTextCursor::End);
    }
    QTextBlockFormat blockFrm;
    QTextBlockFormat blockRght;
    blockFrm.setTopMargin(5);
    blockFrm.setBottomMargin(5);
    blockFrm.setAlignment(Qt::AlignLeft);
    blockFrm.setBackground(QBrush(QColor("lightGray")));
    blockRght.setAlignment(Qt::AlignRight);
    blockRght.setBackground(QBrush(QColor("lightGray")));
    m_cursor.insertBlock(blockFrm);
    m_cursor.insertText(str);
    m_cursor.insertBlock(blockRght);
    setDateDoc();
}
void Reporter::setCaptionDoc(QString str){
    m_cursor.movePosition(QTextCursor::End);
    if(m_iCntTbls>0){
        m_cursor.insertBlock();
        m_cursor.insertBlock();
        m_cursor.movePosition(QTextCursor::End);
    }
    QTextBlockFormat blockFrm;
    blockFrm.setTopMargin(5);
    blockFrm.setBottomMargin(5);
    blockFrm.setAlignment(Qt::AlignCenter);
    m_cursor.insertBlock(blockFrm);
    m_cursor.insertText(str);
}
void Reporter::setDataHeader(QStringList strLst){
    m_cursor.movePosition(QTextCursor::End);
    if(m_iCntTbls>0){
        m_cursor.insertBlock();
        m_cursor.insertBlock();
        m_cursor.movePosition(QTextCursor::End);
    }
    QBrush  borderBrush(Qt::SolidPattern);
    QTextTableFormat tableFormat;
    tableFormat.setCellPadding(5);
    tableFormat.setCellSpacing(0);
    tableFormat.setHeaderRowCount(1);
    tableFormat.setBorderBrush(borderBrush);
    tableFormat.setBorderStyle(QTextFrameFormat::BorderStyle_Ridge);
    tableFormat.setBorder(1);
    tableFormat.setWidth(QTextLength(QTextLength::PercentageLength,100));    
    m_cursor.insertTable(1,strLst.count(),tableFormat);
    foreach(QString str, strLst){
        m_cursor.insertText(str);
        m_cursor.movePosition(QTextCursor::NextCell);
    }
    m_iCntTbls++;
    m_iColCnt=strLst.count();
}

QPainter painter(this);
QRect rec(0,0,this->width(),this->height());
m_reporter->getTextDoc()->drawContents(&painter,rec);

////////QTextTableFormat /////
QTextCursor cur = textEdit->textCursor();
cur.insertTable(5, 3); //таблица 5х3

int main(int argc, char * argv[])
{
    int rows = 6;
    int columns = 2;

    QApplication app(argc, argv);
    QTextEdit *textEdit = new QTextEdit;
    QTextCursor cursor(textEdit->textCursor());
    cursor.movePosition(QTextCursor::Start);

    QTextTableFormat tableFormat;
    tableFormat.setAlignment(Qt::AlignHCenter);
    tableFormat.setCellPadding(2);
    tableFormat.setCellSpacing(2);
    QTextTable *table = cursor.insertTable(rows, columns);
    table->setFormat(tableFormat);
    
    QTextCharFormat boldFormat;
    boldFormat.setFontWeight(QFont::Bold);

    QTextBlockFormat centerFormat;
    centerFormat.setAlignment(Qt::AlignHCenter);
    cursor.mergeBlockFormat(centerFormat);

    cursor = table->cellAt(0, 0).firstCursorPosition();
    cursor.insertText(("Details"), boldFormat);

    cursor = table->cellAt(1, 0).firstCursorPosition();
    cursor.insertText("Alan");

    cursor = table->cellAt(1, 1).firstCursorPosition();
    cursor.insertText("5, Pickety Street");


    table->mergeCells(0, 0, 1, 2);
 
    table->splitCell(0, 0, 1, 1);


    textEdit->show();
    return app.exec();
}

 QTextTableFormat tableFormat; //создать формат таблицы
 tableFormat.setAlignment(Qt::AlignHCenter); //выравнивание
 tableFormat.setBackground(QColor("#EEEEEE")); //фоновый цвет
 tableFormat.setCellPadding(4); //отступ от края ячейки
 tableFormat.setCellSpacing(0); //промежуток между ячейками
 QVector <QTextLength> constraints; //7 столбцов по 15% шириной
 constraints << QTextLength(QTextLength::PercentageLength, 15)
             << QTextLength(QTextLength::PercentageLength, 15)
             << QTextLength(QTextLength::PercentageLength, 15)
             << QTextLength(QTextLength::PercentageLength, 15)
             << QTextLength(QTextLength::PercentageLength, 15)
             << QTextLength(QTextLength::PercentageLength, 15)
             << QTextLength(QTextLength::PercentageLength, 15);
 tableFormat.setColumnWidthConstraints(constraints);

 QTextTable *table = cursor.insertTable(1, 7, tableFormat);
  //создать таблицу из 1 строки и 7 описанных выше столбцов

 QTextCharFormat format = cursor.charFormat(); //общий формат
 format.setFontPointSize(fontSize); //поставить размер шрифта

 QTextCharFormat boldFormat = format;
 boldFormat.setFontWeight(QFont::Bold); //жирный

 QTextCharFormat highlightedFormat = boldFormat;
 highlightedFormat.setBackground(Qt::yellow); //подсвеченный жёлтым

 QTextBlockFormat centerAlignment; //равнять по центру
 centerAlignment.setAlignment(Qt::AlignHCenter|Qt::AlignVCenter);
 QTextBlockFormat rightAlignment; //равнять направо
 rightAlignment.setAlignment(Qt::AlignRight);

 for (int weekDay = 0; weekDay < 7; weekDay++) { //подписи дней недели
  QTextTableCell cell = table->cellAt(0, weekDay); //в нулевой строке
  QTextCursor cellCursor = cell.firstCursorPosition();
  cellCursor.setBlockFormat(centerAlignment);
  cellCursor.insertText(QString("%1").
   arg(QDate::longDayName(weekDay+1)),boldFormat);
 }

 table->insertRows(table->rows(), 1); //вставить подписи

 while (date.month() == selectedDate.month()) { //для текущего месяца
  int weekDay = date.dayOfWeek(); //1=Пн, ...,  7 =Вс
  QTextTableCell cell = table->cellAt(table->rows()-1, weekDay-1);
  QTextCursor cellCursor = cell.firstCursorPosition();
  cellCursor.setBlockFormat(rightAlignment);
  //текущую дату - желтым, иначе обычным
  if (date == QDate::currentDate())
   cellCursor.insertText(QString("%1").arg(date.day()), highlightedFormat);
  else
   cellCursor.insertText(QString("%1").arg(date.day()), format);
  date = date.addDays(1); //следующий день
  if (weekDay == 7 && date.month() == selectedDate.month())
   table->insertRows(table->rows(), 1); //добавить строчку, если пора
 }

 cursor.endEditBlock(); //завершить редактирование
 setWindowTitle(tr("Календарь на %1 %2"). //титул окна
  arg(QDate::longMonthName(selectedDate.month())).
  arg(selectedDate.year()));


 void MainWindow::setFontSize(int size) {
  fontSize = size;
  insertCalendar();
 }

 void MainWindow::setMonth(int month) {
  selectedDate = QDate(selectedDate.year(), month + 1, selectedDate.day());
  insertCalendar();
 }

 void MainWindow::setYear(QDate date) {
  selectedDate = QDate(date.year(), selectedDate.month(), selectedDate.day());
  insertCalendar();
 }
 
 }/*Конец формы отчета*/

	
 
 
 
 
 
 